// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vendors

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson83683bcDecodeGithubComDevopsextToolsVendors(in *jlexer.Lexer, out *IQLObjectsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "objectEntries":
			if in.IsNull() {
				in.Skip()
				out.ObjectEntries = nil
			} else {
				in.Delim('[')
				if out.ObjectEntries == nil {
					if !in.IsDelim(']') {
						out.ObjectEntries = make([]IQLObjectEntry, 0, 0)
					} else {
						out.ObjectEntries = []IQLObjectEntry{}
					}
				} else {
					out.ObjectEntries = (out.ObjectEntries)[:0]
				}
				for !in.IsDelim(']') {
					var v1 IQLObjectEntry
					(v1).UnmarshalEasyJSON(in)
					out.ObjectEntries = append(out.ObjectEntries, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "objectTypeAttributes":
			if in.IsNull() {
				in.Skip()
				out.ObjectTypeAttributes = nil
			} else {
				in.Delim('[')
				if out.ObjectTypeAttributes == nil {
					if !in.IsDelim(']') {
						out.ObjectTypeAttributes = make([]IQLObjectTypeAttribute, 0, 0)
					} else {
						out.ObjectTypeAttributes = []IQLObjectTypeAttribute{}
					}
				} else {
					out.ObjectTypeAttributes = (out.ObjectTypeAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 IQLObjectTypeAttribute
					(v2).UnmarshalEasyJSON(in)
					out.ObjectTypeAttributes = append(out.ObjectTypeAttributes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "objectTypeId":
			out.ObjectTypeId = int(in.Int())
		case "objectTypeIsInherited":
			out.ObjectTypeIsInherited = bool(in.Bool())
		case "abstractObjectType":
			out.AbstractObjectType = bool(in.Bool())
		case "totalFilterCount":
			out.TotalFilterCount = int(in.Int())
		case "startIndex":
			out.StartIndex = int(in.Int())
		case "toIndex":
			out.ToIndex = int(in.Int())
		case "pageObjectSize":
			out.PageObjectSize = int(in.Int())
		case "pageNumber":
			out.PageNumber = int(in.Int())
		case "orderWay":
			out.OrderWay = string(in.String())
		case "qlQuery":
			out.QlQuery = string(in.String())
		case "qlQuerySearchResult":
			out.QlQuerySearchResult = bool(in.Bool())
		case "conversionPossible":
			out.ConversionPossible = bool(in.Bool())
		case "iql":
			out.Iql = string(in.String())
		case "iqlSearchResult":
			out.IqlSearchResult = bool(in.Bool())
		case "pageSize":
			out.PageSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncodeGithubComDevopsextToolsVendors(out *jwriter.Writer, in IQLObjectsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"objectEntries\":"
		out.RawString(prefix[1:])
		if in.ObjectEntries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.ObjectEntries {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"objectTypeAttributes\":"
		out.RawString(prefix)
		if in.ObjectTypeAttributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.ObjectTypeAttributes {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"objectTypeId\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectTypeId))
	}
	{
		const prefix string = ",\"objectTypeIsInherited\":"
		out.RawString(prefix)
		out.Bool(bool(in.ObjectTypeIsInherited))
	}
	{
		const prefix string = ",\"abstractObjectType\":"
		out.RawString(prefix)
		out.Bool(bool(in.AbstractObjectType))
	}
	{
		const prefix string = ",\"totalFilterCount\":"
		out.RawString(prefix)
		out.Int(int(in.TotalFilterCount))
	}
	{
		const prefix string = ",\"startIndex\":"
		out.RawString(prefix)
		out.Int(int(in.StartIndex))
	}
	{
		const prefix string = ",\"toIndex\":"
		out.RawString(prefix)
		out.Int(int(in.ToIndex))
	}
	{
		const prefix string = ",\"pageObjectSize\":"
		out.RawString(prefix)
		out.Int(int(in.PageObjectSize))
	}
	{
		const prefix string = ",\"pageNumber\":"
		out.RawString(prefix)
		out.Int(int(in.PageNumber))
	}
	{
		const prefix string = ",\"orderWay\":"
		out.RawString(prefix)
		out.String(string(in.OrderWay))
	}
	{
		const prefix string = ",\"qlQuery\":"
		out.RawString(prefix)
		out.String(string(in.QlQuery))
	}
	{
		const prefix string = ",\"qlQuerySearchResult\":"
		out.RawString(prefix)
		out.Bool(bool(in.QlQuerySearchResult))
	}
	{
		const prefix string = ",\"conversionPossible\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConversionPossible))
	}
	{
		const prefix string = ",\"iql\":"
		out.RawString(prefix)
		out.String(string(in.Iql))
	}
	{
		const prefix string = ",\"iqlSearchResult\":"
		out.RawString(prefix)
		out.Bool(bool(in.IqlSearchResult))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int(int(in.PageSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IQLObjectsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83683bcEncodeGithubComDevopsextToolsVendors(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IQLObjectsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83683bcEncodeGithubComDevopsextToolsVendors(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IQLObjectsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83683bcDecodeGithubComDevopsextToolsVendors(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IQLObjectsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83683bcDecodeGithubComDevopsextToolsVendors(l, v)
}
func easyjson83683bcDecodeGithubComDevopsextToolsVendors1(in *jlexer.Lexer, out *IQLObjectTypeAttribute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "label":
			out.Label = bool(in.Bool())
		case "type":
			out.Type = int(in.Int())
		case "defaultType":
			easyjson83683bcDecode(in, &out.DefaultType)
		case "hidden":
			out.Hidden = bool(in.Bool())
		case "includeChildObjectTypes":
			out.IncludeChildObjectTypes = bool(in.Bool())
		case "uniqueAttribute":
			out.UniqueAttribute = bool(in.Bool())
		case "options":
			out.Options = string(in.String())
		case "position":
			out.Position = int(in.Int())
		case "description":
			out.Description = string(in.String())
		case "typeValueMulti":
			if in.IsNull() {
				in.Skip()
				out.TypeValueMulti = nil
			} else {
				in.Delim('[')
				if out.TypeValueMulti == nil {
					if !in.IsDelim(']') {
						out.TypeValueMulti = make([]string, 0, 4)
					} else {
						out.TypeValueMulti = []string{}
					}
				} else {
					out.TypeValueMulti = (out.TypeValueMulti)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.TypeValueMulti = append(out.TypeValueMulti, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "referenceObjectTypeId":
			out.ReferenceObjectTypeId = int(in.Int())
		case "referenceObjectType":
			(out.ReferenceObjectType).UnmarshalEasyJSON(in)
		case "suffix":
			out.Suffix = string(in.String())
		case "regexValidation":
			out.RegexValidation = string(in.String())
		case "qlQuery":
			out.QlQuery = string(in.String())
		case "iql":
			out.Iql = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncodeGithubComDevopsextToolsVendors1(out *jwriter.Writer, in IQLObjectTypeAttribute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.Bool(bool(in.Label))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	if true {
		const prefix string = ",\"defaultType\":"
		out.RawString(prefix)
		easyjson83683bcEncode(out, in.DefaultType)
	}
	{
		const prefix string = ",\"hidden\":"
		out.RawString(prefix)
		out.Bool(bool(in.Hidden))
	}
	{
		const prefix string = ",\"includeChildObjectTypes\":"
		out.RawString(prefix)
		out.Bool(bool(in.IncludeChildObjectTypes))
	}
	{
		const prefix string = ",\"uniqueAttribute\":"
		out.RawString(prefix)
		out.Bool(bool(in.UniqueAttribute))
	}
	{
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		out.String(string(in.Options))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if len(in.TypeValueMulti) != 0 {
		const prefix string = ",\"typeValueMulti\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.TypeValueMulti {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.ReferenceObjectTypeId != 0 {
		const prefix string = ",\"referenceObjectTypeId\":"
		out.RawString(prefix)
		out.Int(int(in.ReferenceObjectTypeId))
	}
	if true {
		const prefix string = ",\"referenceObjectType\":"
		out.RawString(prefix)
		(in.ReferenceObjectType).MarshalEasyJSON(out)
	}
	if in.Suffix != "" {
		const prefix string = ",\"suffix\":"
		out.RawString(prefix)
		out.String(string(in.Suffix))
	}
	if in.RegexValidation != "" {
		const prefix string = ",\"regexValidation\":"
		out.RawString(prefix)
		out.String(string(in.RegexValidation))
	}
	if in.QlQuery != "" {
		const prefix string = ",\"qlQuery\":"
		out.RawString(prefix)
		out.String(string(in.QlQuery))
	}
	if in.Iql != "" {
		const prefix string = ",\"iql\":"
		out.RawString(prefix)
		out.String(string(in.Iql))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IQLObjectTypeAttribute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83683bcEncodeGithubComDevopsextToolsVendors1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IQLObjectTypeAttribute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83683bcEncodeGithubComDevopsextToolsVendors1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IQLObjectTypeAttribute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83683bcDecodeGithubComDevopsextToolsVendors1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IQLObjectTypeAttribute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83683bcDecodeGithubComDevopsextToolsVendors1(l, v)
}
func easyjson83683bcDecode(in *jlexer.Lexer, out *struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncode(out *jwriter.Writer, in struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson83683bcDecodeGithubComDevopsextToolsVendors2(in *jlexer.Lexer, out *IQLObjectType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "position":
			out.Position = int(in.Int())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		case "objectCount":
			out.ObjectCount = int(in.Int())
		case "parentObjectTypeId":
			out.ParentObjectTypeId = int(in.Int())
		case "objectSchemaId":
			out.ObjectSchemaId = int(in.Int())
		case "inherited":
			out.Inherited = bool(in.Bool())
		case "abstractObjectType":
			out.AbstractObjectType = bool(in.Bool())
		case "parentObjectTypeInherited":
			out.ParentObjectTypeInherited = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncodeGithubComDevopsextToolsVendors2(out *jwriter.Writer, in IQLObjectType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.Raw((in.Updated).MarshalJSON())
	}
	{
		const prefix string = ",\"objectCount\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectCount))
	}
	{
		const prefix string = ",\"parentObjectTypeId\":"
		out.RawString(prefix)
		out.Int(int(in.ParentObjectTypeId))
	}
	{
		const prefix string = ",\"objectSchemaId\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectSchemaId))
	}
	{
		const prefix string = ",\"inherited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Inherited))
	}
	{
		const prefix string = ",\"abstractObjectType\":"
		out.RawString(prefix)
		out.Bool(bool(in.AbstractObjectType))
	}
	{
		const prefix string = ",\"parentObjectTypeInherited\":"
		out.RawString(prefix)
		out.Bool(bool(in.ParentObjectTypeInherited))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IQLObjectType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83683bcEncodeGithubComDevopsextToolsVendors2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IQLObjectType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83683bcEncodeGithubComDevopsextToolsVendors2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IQLObjectType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83683bcDecodeGithubComDevopsextToolsVendors2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IQLObjectType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83683bcDecodeGithubComDevopsextToolsVendors2(l, v)
}
func easyjson83683bcDecodeGithubComDevopsextToolsVendors3(in *jlexer.Lexer, out *IQLObjectEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "label":
			out.Label = string(in.String())
		case "objectKey":
			out.ObjectKey = string(in.String())
		case "objectType":
			(out.ObjectType).UnmarshalEasyJSON(in)
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]IQLObjectAttribute, 0, 1)
					} else {
						out.Attributes = []IQLObjectAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 IQLObjectAttribute
					(v10).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "archived":
			out.Archived = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncodeGithubComDevopsextToolsVendors3(out *jwriter.Writer, in IQLObjectEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"objectKey\":"
		out.RawString(prefix)
		out.String(string(in.ObjectKey))
	}
	{
		const prefix string = ",\"objectType\":"
		out.RawString(prefix)
		(in.ObjectType).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.Raw((in.Updated).MarshalJSON())
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		if in.Attributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Attributes {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"archived\":"
		out.RawString(prefix)
		out.Bool(bool(in.Archived))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IQLObjectEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83683bcEncodeGithubComDevopsextToolsVendors3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IQLObjectEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83683bcEncodeGithubComDevopsextToolsVendors3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IQLObjectEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83683bcDecodeGithubComDevopsextToolsVendors3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IQLObjectEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83683bcDecodeGithubComDevopsextToolsVendors3(l, v)
}
func easyjson83683bcDecodeGithubComDevopsextToolsVendors4(in *jlexer.Lexer, out *IQLObjectAttributeValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "displayValue":
			out.DisplayValue = string(in.String())
		case "searchValue":
			out.SearchValue = string(in.String())
		case "referencedType":
			out.ReferencedType = bool(in.Bool())
		case "status":
			easyjson83683bcDecode1(in, &out.Status)
		case "referencedObject":
			(out.ReferencedObject).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncodeGithubComDevopsextToolsVendors4(out *jwriter.Writer, in IQLObjectAttributeValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != "" {
		const prefix string = ",\"value\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"displayValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayValue))
	}
	{
		const prefix string = ",\"searchValue\":"
		out.RawString(prefix)
		out.String(string(in.SearchValue))
	}
	{
		const prefix string = ",\"referencedType\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReferencedType))
	}
	if true {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		easyjson83683bcEncode1(out, in.Status)
	}
	if true {
		const prefix string = ",\"referencedObject\":"
		out.RawString(prefix)
		(in.ReferencedObject).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IQLObjectAttributeValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83683bcEncodeGithubComDevopsextToolsVendors4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IQLObjectAttributeValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83683bcEncodeGithubComDevopsextToolsVendors4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IQLObjectAttributeValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83683bcDecodeGithubComDevopsextToolsVendors4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IQLObjectAttributeValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83683bcDecodeGithubComDevopsextToolsVendors4(l, v)
}
func easyjson83683bcDecode1(in *jlexer.Lexer, out *struct {
	Id             int    `json:"id"`
	Name           string `json:"name"`
	Category       int    `json:"category"`
	ObjectSchemaId int    `json:"objectSchemaId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "category":
			out.Category = int(in.Int())
		case "objectSchemaId":
			out.ObjectSchemaId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncode1(out *jwriter.Writer, in struct {
	Id             int    `json:"id"`
	Name           string `json:"name"`
	Category       int    `json:"category"`
	ObjectSchemaId int    `json:"objectSchemaId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.Int(int(in.Category))
	}
	{
		const prefix string = ",\"objectSchemaId\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectSchemaId))
	}
	out.RawByte('}')
}
func easyjson83683bcDecodeGithubComDevopsextToolsVendors5(in *jlexer.Lexer, out *IQLObjectAttribute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "objectTypeAttributeId":
			out.ObjectTypeAttributeId = int(in.Int())
		case "objectAttributeValues":
			if in.IsNull() {
				in.Skip()
				out.ObjectAttributeValues = nil
			} else {
				in.Delim('[')
				if out.ObjectAttributeValues == nil {
					if !in.IsDelim(']') {
						out.ObjectAttributeValues = make([]IQLObjectAttributeValue, 0, 0)
					} else {
						out.ObjectAttributeValues = []IQLObjectAttributeValue{}
					}
				} else {
					out.ObjectAttributeValues = (out.ObjectAttributeValues)[:0]
				}
				for !in.IsDelim(']') {
					var v13 IQLObjectAttributeValue
					(v13).UnmarshalEasyJSON(in)
					out.ObjectAttributeValues = append(out.ObjectAttributeValues, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "objectId":
			out.ObjectId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncodeGithubComDevopsextToolsVendors5(out *jwriter.Writer, in IQLObjectAttribute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"objectTypeAttributeId\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectTypeAttributeId))
	}
	{
		const prefix string = ",\"objectAttributeValues\":"
		out.RawString(prefix)
		if in.ObjectAttributeValues == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.ObjectAttributeValues {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"objectId\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IQLObjectAttribute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83683bcEncodeGithubComDevopsextToolsVendors5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IQLObjectAttribute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83683bcEncodeGithubComDevopsextToolsVendors5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IQLObjectAttribute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83683bcDecodeGithubComDevopsextToolsVendors5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IQLObjectAttribute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83683bcDecodeGithubComDevopsextToolsVendors5(l, v)
}
func easyjson83683bcDecodeGithubComDevopsextToolsVendors6(in *jlexer.Lexer, out *CustomSearchAssetsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.ObjectTypeAttributes = nil
			} else {
				in.Delim('[')
				if out.ObjectTypeAttributes == nil {
					if !in.IsDelim(']') {
						out.ObjectTypeAttributes = make([]IQLObjectTypeAttribute, 0, 0)
					} else {
						out.ObjectTypeAttributes = []IQLObjectTypeAttribute{}
					}
				} else {
					out.ObjectTypeAttributes = (out.ObjectTypeAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v16 IQLObjectTypeAttribute
					(v16).UnmarshalEasyJSON(in)
					out.ObjectTypeAttributes = append(out.ObjectTypeAttributes, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "objects":
			if in.IsNull() {
				in.Skip()
				out.ObjectEntries = nil
			} else {
				in.Delim('[')
				if out.ObjectEntries == nil {
					if !in.IsDelim(']') {
						out.ObjectEntries = make([]IQLObjectEntry, 0, 0)
					} else {
						out.ObjectEntries = []IQLObjectEntry{}
					}
				} else {
					out.ObjectEntries = (out.ObjectEntries)[:0]
				}
				for !in.IsDelim(']') {
					var v17 IQLObjectEntry
					(v17).UnmarshalEasyJSON(in)
					out.ObjectEntries = append(out.ObjectEntries, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83683bcEncodeGithubComDevopsextToolsVendors6(out *jwriter.Writer, in CustomSearchAssetsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix[1:])
		if in.ObjectTypeAttributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.ObjectTypeAttributes {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"objects\":"
		out.RawString(prefix)
		if in.ObjectEntries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.ObjectEntries {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomSearchAssetsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83683bcEncodeGithubComDevopsextToolsVendors6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomSearchAssetsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83683bcEncodeGithubComDevopsextToolsVendors6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomSearchAssetsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83683bcDecodeGithubComDevopsextToolsVendors6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomSearchAssetsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83683bcDecodeGithubComDevopsextToolsVendors6(l, v)
}
